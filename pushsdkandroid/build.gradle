apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlinx-serialization'
apply from: "publisher.gradle"
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'org.jetbrains.dokka'

apply plugin: 'maven-publish'

group='com.github.kirillkotov'

ext.build_version_name = '1.0.0.54'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        //applicationId "com.push.android.pushsdkandroid"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        //versionName "1.0.0.48"
        versionName "${build_version_name}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.lifecycle:lifecycle-process:2.2.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'android.arch.work:work-runtime:1.0.1'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.9.1"

    //noinspection GradleDependency
    implementation 'com.google.firebase:firebase-core:17.5.0'
    //noinspection GradleDependency
    implementation 'com.google.firebase:firebase-iid:20.2.4'
    //noinspection GradleDependency
    implementation 'com.google.firebase:firebase-messaging:20.2.4'

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'

    implementation 'io.github.microutils:kotlin-logging:1.8.3'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.6'
}

//get HEAD commit hash
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        //short commit hash
        //commandLine 'git', 'rev-parse', '--short', 'HEAD'
        //full commit hash
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.push.android'
                artifactId = 'PushSDK'
                //version = '1.0'
                version = "${build_version_name}-RELEASE"
            }
            snapshot(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.release

                groupId = 'com.push.android'
                artifactId = 'PushSDK'
                //version = '1.0'
                version = "${build_version_name}-SNAPSHOT"
            }
            commitHash(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.release

                groupId = 'com.push.android'
                artifactId = 'PushSDK'
                //version = '1.0'
                version = "${getGitHash}"
            }
            // Creates a Maven publication called “debug”.
//            debug(MavenPublication) {
//                // Applies the component for the debug build variant.
//                from components.debug
//
//                groupId = 'com.push.android'
//                artifactId = 'PushSDK-debug'
//                version = '1.0'
//            }
        }

        //publish to this path
        repositories {
            maven {
                //publish locally for now
                url "$buildDir/maven-repos/"
//                def releasesRepoUrl = "$buildDir/maven-repos/releases"
//                def snapshotsRepoUrl = "$buildDir/maven-repos/snapshots"
//                url = version.endsWith('RELEASE') ? releasesRepoUrl : snapshotsRepoUrl
            }
        }
    }
}

dokkaJavadoc.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
        //outputDirectory.set(buildDir("ayy"))
        configureEach {
            includes.from("Module.md")
            skipDeprecated.set(false)
            skipEmptyPackages.set(true)
            reportUndocumented.set(true)
            includeNonPublic.set(false)
        }
    }
}

dokkaHtml.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
        //outputDirectory.set(buildDir("ayy"))
        configureEach {
            includes.from("Module.md")
            skipDeprecated.set(false)
            skipEmptyPackages.set(true)
            reportUndocumented.set(true)
            includeNonPublic.set(false)
        }
    }
}

dokkaGfm.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
        //outputDirectory.set(buildDir("ayy"))
        configureEach {
            includes.from("Module.md")
            skipDeprecated.set(false)
            skipEmptyPackages.set(true)
            reportUndocumented.set(true)
            includeNonPublic.set(false)
        }
    }
}

task dokkaJavadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from tasks.dokkaJavadoc.outputDirectory
}

//task dokkaHtmlJar(type: Jar, dependsOn: dokkaHtml) {
//    //archiveClassifier.set('html-doc')
//    archiveClassifier.set('kdoc')
//    from tasks.dokkaHtml.outputDirectory
//}

artifacts {
    archives dokkaJavadocJar
//    archives dokkaHtmlJar
}
